{
   "kind":"Listing",
   "data":{
      "modhash":"",
      "children":[
         {
            "kind":"t3",
            "data":{
               "domain":"github.com",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z86rh",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"loxoko",
               "num_comments":1,
               "score":3,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2z86rh/desktop_email_notification_daemon/",
               "name":"t3_2z86rh",
               "created":1426539082.0,
               "url":"https://github.com/TheCreeper/MessageNotificationDaemon",
               "author_flair_text":null,
               "title":"Desktop E-Mail Notification Daemon",
               "created_utc":1426510282.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":3
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"texlution.com",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z6kd0",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"vruin",
               "num_comments":0,
               "score":14,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2z6kd0/canonical_import_paths_in_golang/",
               "name":"t3_2z6kd0",
               "created":1426495798.0,
               "url":"https://texlution.com/post/golang-canonical-import-paths/",
               "author_flair_text":null,
               "title":"Canonical import paths in Golang",
               "created_utc":1426466998.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":14
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"utcc.utoronto.ca",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z57cx",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"HarveyKandola",
               "num_comments":3,
               "score":23,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2z57cx/the_importance_of_user_interface_illustrated_by/",
               "name":"t3_2z57cx",
               "created":1426471882.0,
               "url":"http://utcc.utoronto.ca/~cks/space/blog/programming/GoFlagUIImportance",
               "author_flair_text":null,
               "title":"The importance of user interface, illustrated by the Go flag package",
               "created_utc":1426443082.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":23
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"relistan.com",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z59di",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"dgryski",
               "num_comments":4,
               "score":9,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2z59di/continue_statements_with_labels_in_go/",
               "name":"t3_2z59di",
               "created":1426472871.0,
               "url":"http://relistan.com/continue-statement-with-labels-in-go/",
               "author_flair_text":null,
               "title":"Continue statements with Labels in Go",
               "created_utc":1426444071.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":9
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"noeffclue.blogspot.ca",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z4p04",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"JupiterV2",
               "num_comments":5,
               "score":11,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2z4p04/no_effing_clue_objects_in_memory/",
               "name":"t3_2z4p04",
               "created":1426462519.0,
               "url":"http://noeffclue.blogspot.ca/2015/03/objects-in-memory.html",
               "author_flair_text":null,
               "title":"No Effing Clue: Objects In Memory",
               "created_utc":1426433719.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":11
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"github.com",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z62j6",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"rjik",
               "num_comments":0,
               "score":1,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2z62j6/a_middleware_for_github_webhooks/",
               "name":"t3_2z62j6",
               "created":1426486846.0,
               "url":"https://github.com/rjeczalik/gh",
               "author_flair_text":null,
               "title":"A middleware for GitHub Webhooks",
               "created_utc":1426458046.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":1
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"self.golang",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":"&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/elgris/sqrl\"&gt;https://github.com/elgris/sqrl&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;A mix of squirrel and dbr. Benchmarks provided: &lt;a href=\"https://github.com/elgris/golang-sql-builder-benchmark\"&gt;https://github.com/elgris/golang-sql-builder-benchmark&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Check it out :)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
               "selftext":"https://github.com/elgris/sqrl\n\nA mix of squirrel and dbr. Benchmarks provided: https://github.com/elgris/golang-sql-builder-benchmark\n\nCheck it out :)",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z6nul",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"ellgris",
               "num_comments":0,
               "score":0,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":true,
               "permalink":"/r/golang/comments/2z6nul/yet_another_sql_builder/",
               "name":"t3_2z6nul",
               "created":1426497611.0,
               "url":"http://www.reddit.com/r/golang/comments/2z6nul/yet_another_sql_builder/",
               "author_flair_text":null,
               "title":"Yet another SQL builder",
               "created_utc":1426468811.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":0
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"github.com",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z6nfr",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"hgfischer",
               "num_comments":5,
               "score":0,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2z6nfr/gobfmt_is_fmt_but_flagged/",
               "name":"t3_2z6nfr",
               "created":1426497398.0,
               "url":"https://github.com/hgfischer/go-bfmt",
               "author_flair_text":null,
               "title":"go-bfmt is fmt, but flagged!",
               "created_utc":1426468598.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":0
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"self.golang",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":"&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;this line in my code&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var array [10]byte{&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;f&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;i&amp;#39;, &amp;#39;j&amp;#39;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;throws these two errors:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;expected &amp;#39;;&amp;#39;, found &amp;#39;{&amp;#39;\nsyntax error: unexpected { at end of statement\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;does anybody have any idea why? thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
               "selftext":"this line in my code\n\n    var array [10]byte{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'}\n\nthrows these two errors:\n\n    expected ';', found '{'\n    syntax error: unexpected { at end of statement\n\ndoes anybody have any idea why? thanks!",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z6hpw",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"parrotjay",
               "num_comments":6,
               "score":0,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":true,
               "permalink":"/r/golang/comments/2z6hpw/confusing_error_help/",
               "name":"t3_2z6hpw",
               "created":1426494446.0,
               "url":"http://www.reddit.com/r/golang/comments/2z6hpw/confusing_error_help/",
               "author_flair_text":null,
               "title":"confusing error, help?!",
               "created_utc":1426465646.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":0
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"devcraft.tv",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z45h7",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"premjg",
               "num_comments":0,
               "score":4,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2z45h7/devcrafttv_a_new_free_polyglot_screencast_site/",
               "name":"t3_2z45h7",
               "created":1426447870.0,
               "url":"http://devcraft.tv/",
               "author_flair_text":null,
               "title":"Devcraft.tv - A new free polyglot screencast site with current focus on Golang. I welcome your feedback. Every episode has page a survey link at the bottom - it'd be awesome if you could take the survey and help me improve. Cheers!",
               "created_utc":1426419070.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":4
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"github.com",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z1frh",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"HarveyKandola",
               "num_comments":22,
               "score":48,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2z1frh/a_jvm_writing_in_go/",
               "name":"t3_2z1frh",
               "created":1426385069.0,
               "url":"https://github.com/zxh0/jvm.go",
               "author_flair_text":null,
               "title":"A JVM writing in GO",
               "created_utc":1426356269.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":48
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"self.golang",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":"&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a situation where I need to move all data after a certain offset in a file forward some number of bytes, in order to make a gap so that data can be written to the middle of the file. My first idea is to use bufio.Read and bufio.Write to copy small chunks and rewrite them in the new location, but I&amp;#39;m wondering if this sort of behavior is already covered by some package or method.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
               "selftext":"I have a situation where I need to move all data after a certain offset in a file forward some number of bytes, in order to make a gap so that data can be written to the middle of the file. My first idea is to use bufio.Read and bufio.Write to copy small chunks and rewrite them in the new location, but I'm wondering if this sort of behavior is already covered by some package or method.",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z2dry",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"will_alexander",
               "num_comments":10,
               "score":1,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":true,
               "permalink":"/r/golang/comments/2z2dry/question_best_way_to_copy_data_in_a_file_forward/",
               "name":"t3_2z2dry",
               "created":1426402126.0,
               "url":"http://www.reddit.com/r/golang/comments/2z2dry/question_best_way_to_copy_data_in_a_file_forward/",
               "author_flair_text":null,
               "title":"Question: Best way to copy data in a file forward",
               "created_utc":1426373326.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":1
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"self.golang",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":"&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Considering most say to avoid ORMs (gorm being the only one I saw with a decent amount of relationship examples), are there any good open source projects out there that show scanning and populating structs with relationships such as has-one, belongs-to, many-to-many, etc using sqlx?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
               "selftext":"Considering most say to avoid ORMs (gorm being the only one I saw with a decent amount of relationship examples), are there any good open source projects out there that show scanning and populating structs with relationships such as has-one, belongs-to, many-to-many, etc using sqlx?",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z16fh",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"JonnyPolo",
               "num_comments":4,
               "score":2,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":true,
               "permalink":"/r/golang/comments/2z16fh/sqlx_structs_and_db_relationships/",
               "name":"t3_2z16fh",
               "created":1426380383.0,
               "url":"http://www.reddit.com/r/golang/comments/2z16fh/sqlx_structs_and_db_relationships/",
               "author_flair_text":null,
               "title":"sqlx, structs, and db relationships?",
               "created_utc":1426351583.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":2
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"mkaczanowski.com",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z0a6n",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"kangur91",
               "num_comments":0,
               "score":4,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2z0a6n/building_arm_cluster_part_2_create_and_write/",
               "name":"t3_2z0a6n",
               "created":1426357266.0,
               "url":"http://mkaczanowski.com/building-arm-cluster-part-2-create-and-write-system-image-with-goback/",
               "author_flair_text":null,
               "title":"#Building ARM cluster Part 2: Create and write system image with goback!",
               "created_utc":1426328466.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":4
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"infoworld.com",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2z30tf",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"davecheney",
               "num_comments":2,
               "score":0,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2z30tf/google_go_upgrade_banks_on_go_itself/",
               "name":"t3_2z30tf",
               "created":1426414877.0,
               "url":"http://www.infoworld.com/article/2867316/google-go/google-go-upgrade-banks-on-go-itself.html",
               "author_flair_text":null,
               "title":"Google Go upgrade banks on Go itself",
               "created_utc":1426386077.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":0
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"cypherpunks.ru",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2yx2dp",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"ansible",
               "num_comments":0,
               "score":15,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2yx2dp/govpn_simple_secure_free_software_virtual_private/",
               "name":"t3_2yx2dp",
               "created":1426289338.0,
               "url":"http://www.cypherpunks.ru/govpn/",
               "author_flair_text":null,
               "title":"GoVPN \u2013 simple secure free software virtual private network daemon",
               "created_utc":1426260538.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":15
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"gosrc.org",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2yw5ca",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"dgryski",
               "num_comments":10,
               "score":31,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2yw5ca/gosrcorg_godoc_sourcegraph_tooltips_examples/",
               "name":"t3_2yw5ca",
               "created":1426265516.0,
               "url":"http://gosrc.org",
               "author_flair_text":null,
               "title":"gosrc.org: godoc + sourcegraph + tooltips + examples",
               "created_utc":1426236716.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":31
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"github.com",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2yw1pb",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"gohacker",
               "num_comments":4,
               "score":12,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2yw1pb/simple_secure_free_software_vpn_daemon/",
               "name":"t3_2yw1pb",
               "created":1426261683.0,
               "url":"https://github.com/stargrave/govpn",
               "author_flair_text":null,
               "title":"Simple secure free software VPN daemon",
               "created_utc":1426232883.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":12
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"self.golang",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":"&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I just started playing around with go a month or so ago, and have been picking apart the code from this stack overflow answer:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://stackoverflow.com/a/11202252\"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;What I wanted to do was wrap up the encoding code in a loop and send multiple packets over, expecting to see multiple decodes on the server side.  So I did something like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fmt.Printf(&amp;quot;Connecting to %s:%d\\n&amp;quot;, server.Ip, server.Port)                                                                                                                                                                                                                                                   \nconn, err := net.Dial(&amp;quot;tcp&amp;quot;, server.Ip + server.Port)                                                                                                                                                                                                                                                          \nif err != nil {                                                                                                                                                                                                                                                                                               \n  log.Fatal(&amp;quot;Connection error\\n&amp;quot;, err)                                                                                                                                                                                                                                                                      \n}                                                                                                                                                                                                                                                                                                             \nfor i := 1; i &amp;lt;= 10; i++ {                                                                                                                                                                                                                                                                                   \n  encoder := gob.NewEncoder(conn)                                                                                                                                                                                                                                                                           \n  var i64 int64                                                                                                                                                                                                                                                                                            \n  i64 = int64(i)                                                                                                                                                                                                                                                                                            \n  p := &amp;amp;packet{&amp;quot;test&amp;quot;, id}                                                                                                                                                                                                                                                                                  \n  encoder.Encode(p)                                                                                                                                                                                                                                                                                         \n}nconn.Close()                                                                                                                                                                                                                                                                                                \nfmt.Println(&amp;quot;done\\n&amp;quot;)                                                                                                                                                                                                                                                                                       \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, this results in the server getting the first packet, and nothing else.  What does work though, is if I remove the inner loop and wrap this entire block of code in a for loop.  So effectively, rather than reusing conn, I create a new one each time.  My understanding was that conn was a socket I could continue to write and read from, but is that not the case?&lt;/p&gt;\n\n&lt;p&gt;Any insight or links to point me in the right direction would be greatly appreciated.  &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
               "selftext":"I just started playing around with go a month or so ago, and have been picking apart the code from this stack overflow answer:\n\n[Stack Overflow](http://stackoverflow.com/a/11202252)\n\nWhat I wanted to do was wrap up the encoding code in a loop and send multiple packets over, expecting to see multiple decodes on the server side.  So I did something like this:\n\n    fmt.Printf(\"Connecting to %s:%d\\n\", server.Ip, server.Port)                                                                                                                                                                                                                                                   \n    conn, err := net.Dial(\"tcp\", server.Ip + server.Port)                                                                                                                                                                                                                                                          \n    if err != nil {                                                                                                                                                                                                                                                                                               \n      log.Fatal(\"Connection error\\n\", err)                                                                                                                                                                                                                                                                      \n    }                                                                                                                                                                                                                                                                                                             \n    for i := 1; i &lt;= 10; i++ {                                                                                                                                                                                                                                                                                   \n      encoder := gob.NewEncoder(conn)                                                                                                                                                                                                                                                                           \n      var i64 int64                                                                                                                                                                                                                                                                                            \n      i64 = int64(i)                                                                                                                                                                                                                                                                                            \n      p := &amp;packet{\"test\", id}                                                                                                                                                                                                                                                                                  \n      encoder.Encode(p)                                                                                                                                                                                                                                                                                         \n    }n    conn.Close()                                                                                                                                                                                                                                                                                                \n    fmt.Println(\"done\\n\")                                                                                                                                                                                                                                                                                       \n\nHowever, this results in the server getting the first packet, and nothing else.  What does work though, is if I remove the inner loop and wrap this entire block of code in a for loop.  So effectively, rather than reusing conn, I create a new one each time.  My understanding was that conn was a socket I could continue to write and read from, but is that not the case?\n\nAny insight or links to point me in the right direction would be greatly appreciated.  ",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2ywyh1",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"autumntheory",
               "num_comments":12,
               "score":2,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":1426259112.0,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":true,
               "permalink":"/r/golang/comments/2ywyh1/question_about_reusing_netconn/",
               "name":"t3_2ywyh1",
               "created":1426287455.0,
               "url":"http://www.reddit.com/r/golang/comments/2ywyh1/question_about_reusing_netconn/",
               "author_flair_text":null,
               "title":"Question about reusing net.Conn",
               "created_utc":1426258655.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":2
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"github.com",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2yte70",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"tylersmith-uv",
               "num_comments":8,
               "score":22,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2yte70/gocrafthealth_instrument_your_web_apps_with/",
               "name":"t3_2yte70",
               "created":1426210840.0,
               "url":"https://github.com/gocraft/health",
               "author_flair_text":null,
               "title":"gocraft/health - Instrument your web apps with logging and metrics",
               "created_utc":1426182040.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":22
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"blog.turret.io",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2yusco",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"tems00",
               "num_comments":7,
               "score":7,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2yusco/gomenu_a_simple_library_for_making_interactive/",
               "name":"t3_2yusco",
               "created":1426233506.0,
               "url":"http://blog.turret.io/go-menu-simple-interactive-command-line-menus/",
               "author_flair_text":null,
               "title":"Go-menu: A simple library for making interactive command line menus in Go",
               "created_utc":1426204706.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":7
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"github.com",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2yv0da",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"ahajdarevic",
               "num_comments":3,
               "score":3,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2yv0da/webhook_200_a_lightweight_configurable_tool/",
               "name":"t3_2yv0da",
               "created":1426237604.0,
               "url":"https://github.com/adnanh/webhook",
               "author_flair_text":null,
               "title":"webhook 2.0.0 - a lightweight configurable tool written in Go, that allows you to easily create HTTP endpoints (hooks) on your server which will execute commands",
               "created_utc":1426208804.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":3
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"self.golang",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":"&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I love Go.  It has served me extremely well both for personal projects and at my job.  It&amp;#39;s fast, it&amp;#39;s nimble, and it takes practically no time to get a simple service off the ground.&lt;/p&gt;\n\n&lt;p&gt;That being said, I find myself undecided as to how to structure my web applications.  I come from a very SOA background (heavy in the Java/C# world), and I find myself desiring some of that same structure.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s what one of my typical (small) web applications would look like from a design perspective:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;main() function parses configuration options, and initializes and starts Server.&lt;/li&gt;\n&lt;li&gt;Server struct controls routing. It sets up middleware, session management, etc. It has many handler functions attached to it.&lt;/li&gt;\n&lt;li&gt;Server has references to DS interfaces, such as UserDs, CampaignDs, CompanyDs, etc.  These interfaces have many methods that define all the possible ways data could be accessed for a particular object.  For example, the UserDs might define a function GetOneById(id uint32) (*User, error)&lt;/li&gt;\n&lt;li&gt;Ds interfaces are implemented by a corresponding database-specific struct.  For instance, UserDs might be implemented by MySqlUserDs.  This pattern of using a data store interface rather than referencing the struct directly allows me to have a MockUserDs that can be used for testing.&lt;/li&gt;\n&lt;li&gt;Server handlers use context to retrieve any data procured by middleware, such as a User struct.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This works fine for smaller applications, but as the app grows there are a number of reasons why I feel as if I&amp;#39;m going about this the wrong way.&lt;/p&gt;\n\n&lt;p&gt;First, Go loves small interfaces, and my Ds interfaces are anything but that.  Every way of retrieving data becomes a separate function on the Ds.&lt;/p&gt;\n\n&lt;p&gt;Additionally, my handlers are acting both as the controller and the service (if I were comparing them to an MVC SOA app), and as the app grows these handlers are beginning to duplicate a lot of functionality that I would have typically exposed at the service layer (boy do I miss that service layer).&lt;/p&gt;\n\n&lt;p&gt;I feel like overall I&amp;#39;m trying to go against the grain by implementing these SOA patterns (albeit in a much reduced form) in my Go code, so I&amp;#39;m curious what design patterns the community have found to work well as your web applications grow.  All viewpoints are appreciated.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d also love to hear how others out there are structuring their applications--it&amp;#39;s great to have multiple perspectives.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
               "selftext":"I love Go.  It has served me extremely well both for personal projects and at my job.  It's fast, it's nimble, and it takes practically no time to get a simple service off the ground.\n\nThat being said, I find myself undecided as to how to structure my web applications.  I come from a very SOA background (heavy in the Java/C# world), and I find myself desiring some of that same structure.\n\nHere's what one of my typical (small) web applications would look like from a design perspective:\n\n- main() function parses configuration options, and initializes and starts Server.\n- Server struct controls routing. It sets up middleware, session management, etc. It has many handler functions attached to it.\n- Server has references to DS interfaces, such as UserDs, CampaignDs, CompanyDs, etc.  These interfaces have many methods that define all the possible ways data could be accessed for a particular object.  For example, the UserDs might define a function GetOneById(id uint32) (*User, error)\n- Ds interfaces are implemented by a corresponding database-specific struct.  For instance, UserDs might be implemented by MySqlUserDs.  This pattern of using a data store interface rather than referencing the struct directly allows me to have a MockUserDs that can be used for testing.\n- Server handlers use context to retrieve any data procured by middleware, such as a User struct.\n\nThis works fine for smaller applications, but as the app grows there are a number of reasons why I feel as if I'm going about this the wrong way.\n\nFirst, Go loves small interfaces, and my Ds interfaces are anything but that.  Every way of retrieving data becomes a separate function on the Ds.\n\nAdditionally, my handlers are acting both as the controller and the service (if I were comparing them to an MVC SOA app), and as the app grows these handlers are beginning to duplicate a lot of functionality that I would have typically exposed at the service layer (boy do I miss that service layer).\n\nI feel like overall I'm trying to go against the grain by implementing these SOA patterns (albeit in a much reduced form) in my Go code, so I'm curious what design patterns the community have found to work well as your web applications grow.  All viewpoints are appreciated.\n\n**UPDATE**\n\nI'd also love to hear how others out there are structuring their applications--it's great to have multiple perspectives.",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2ytfve",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"vegasje",
               "num_comments":5,
               "score":6,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":1426265485.0,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":true,
               "permalink":"/r/golang/comments/2ytfve/web_application_structure_best_practices/",
               "name":"t3_2ytfve",
               "created":1426211571.0,
               "url":"http://www.reddit.com/r/golang/comments/2ytfve/web_application_structure_best_practices/",
               "author_flair_text":null,
               "title":"Web Application Structure / Best Practices",
               "created_utc":1426182771.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":6
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"github.com",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2ytv3c",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"touhonoob",
               "num_comments":1,
               "score":2,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2ytv3c/dynamic_jpeg_thumbnailing_proxy_written_in_golang/",
               "name":"t3_2ytv3c",
               "created":1426218211.0,
               "url":"https://github.com/pixiv/go-thumber",
               "author_flair_text":null,
               "title":"Dynamic JPEG Thumbnailing Proxy Written In Golang",
               "created_utc":1426189411.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":2
            }
         },
         {
            "kind":"t3",
            "data":{
               "domain":"github.com",
               "banned_by":null,
               "media_embed":{

               },
               "subreddit":"golang",
               "selftext_html":null,
               "selftext":"",
               "likes":null,
               "user_reports":[

               ],
               "secure_media":null,
               "link_flair_text":null,
               "id":"2yu40o",
               "gilded":0,
               "archived":false,
               "clicked":false,
               "report_reasons":null,
               "author":"shelakel",
               "num_comments":3,
               "score":1,
               "approved_by":null,
               "over_18":false,
               "hidden":false,
               "thumbnail":"",
               "subreddit_id":"t5_2rc7j",
               "edited":false,
               "link_flair_css_class":null,
               "author_flair_css_class":null,
               "downs":0,
               "secure_media_embed":{

               },
               "saved":false,
               "stickied":false,
               "is_self":false,
               "permalink":"/r/golang/comments/2yu40o/dspace_visual_disk_space_analyzer/",
               "name":"t3_2yu40o",
               "created":1426222198.0,
               "url":"https://github.com/shelakel/dspace",
               "author_flair_text":null,
               "title":"dspace - (Visual) Disk Space Analyzer",
               "created_utc":1426193398.0,
               "distinguished":null,
               "media":null,
               "mod_reports":[

               ],
               "visited":false,
               "num_reports":null,
               "ups":1
            }
         }
      ],
      "after":"t3_2yu40o",
      "before":null
   }
}